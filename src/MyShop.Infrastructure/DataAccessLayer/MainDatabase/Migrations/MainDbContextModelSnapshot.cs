// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyShop.Infrastructure.DataAccessLayer.MainDatabase;

#nullable disable

namespace MyShop.Infrastructure.DataAccessLayer.MainDatabase.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyShop.Core.Models.MainPageSections.MainPageSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MainPageSectionType")
                        .IsRequired()
                        .HasMaxLength(33)
                        .HasColumnType("nvarchar(33)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("MainPageSection");

                    b.HasDiscriminator<string>("MainPageSectionType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MyShop.Core.Models.MainPageSections.WebsiteHeroSectionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("RouterLink")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("WebsiteHeroSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebsiteHeroSectionPhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteHeroSectionId");

                    b.HasIndex("WebsiteHeroSectionPhotoId");

                    b.ToTable("WebsiteHeroSectionItems");
                });

            modelBuilder.Entity("MyShop.Core.Models.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)");

                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MyShop.Core.Models.Notifications.NotificationRegisteredUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegisteredUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("RegisteredUserId");

                    b.ToTable("NotificationRegisteredUsers");
                });

            modelBuilder.Entity("MyShop.Core.Models.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RedirectPaymentUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MyShop.Core.Models.Orders.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("MyShop.Core.Models.Orders.OrderStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderStatusHistories");
                });

            modelBuilder.Entity("MyShop.Core.Models.Photos.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("PhotoSize")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<string>("PhotoType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FilePath")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Uri")
                        .IsUnique();

                    b.ToTable("Photos", (string)null);

                    b.HasDiscriminator<string>("PhotoType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.BaseProductOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductOptionSortType")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("ProductOptionSubtype")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProductOptionType")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductOptions", (string)null);

                    b.HasDiscriminator<string>("ProductOptionType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.BaseProductOptionValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ProductOptionValues", (string)null);

                    b.HasDiscriminator();

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("Name", "ParentCategoryId")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EncodedProductVariantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RegisteredUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredUserId", "EncodedProductVariantName")
                        .IsUnique();

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("DisplayProductType")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)");

                    b.Property<string>("EncodedName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductProductDetailOptionValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductDetailOptionValueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ProductDetailOptionValueId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductProductDetailOptionValues");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductProductVariantOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVariantOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantOptionId");

                    b.ToTable("ProductProductVariantOptions");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<Guid>("RegisteredUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Review")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RegisteredUserId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EncodedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SkuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortPriority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductVariantPhotoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVariantPhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("ProductVariantPhotoId");

                    b.ToTable("ProductVariantPhotoItems");
                });

            modelBuilder.Entity("MyShop.Core.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CheckoutId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("MyShop.Core.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("MyShop.Core.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Role");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MyShop.Core.Models.Users.UserAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApartmentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<Guid>("RegisteredUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserAddressName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredUserId", "UserAddressName")
                        .IsUnique();

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("MyShop.Core.Models.Users.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Browser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpiryRefreshTokenDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsMobile")
                        .HasColumnType("bit");

                    b.Property<string>("OperatingSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ProductVariantProductVariantOptionValue", b =>
                {
                    b.Property<Guid>("ProductVariantOptionValuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVariantsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductVariantOptionValuesId", "ProductVariantsId");

                    b.HasIndex("ProductVariantsId");

                    b.ToTable("ProductVariantProductVariantOptionValue");
                });

            modelBuilder.Entity("MyShop.Core.Models.MainPageSections.WebsiteHeroSection", b =>
                {
                    b.HasBaseType("MyShop.Core.Models.MainPageSections.MainPageSection");

                    b.Property<string>("DisplayType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasDiscriminator().HasValue("Website Hero Section");
                });

            modelBuilder.Entity("MyShop.Core.Models.MainPageSections.WebsiteProductsCarouselSection", b =>
                {
                    b.HasBaseType("MyShop.Core.Models.MainPageSections.MainPageSection");

                    b.Property<string>("ProductsCarouselSectionType")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasDiscriminator().HasValue("Website Products Carousel Section");
                });

            modelBuilder.Entity("MyShop.Core.Models.Photos.ProductVariantPhoto", b =>
                {
                    b.HasBaseType("MyShop.Core.Models.Photos.Photo");

                    b.HasDiscriminator().HasValue("Product Variant Photo");
                });

            modelBuilder.Entity("MyShop.Core.Models.Photos.UserPhoto", b =>
                {
                    b.HasBaseType("MyShop.Core.Models.Photos.Photo");

                    b.HasDiscriminator().HasValue("User Photo");
                });

            modelBuilder.Entity("MyShop.Core.Models.Photos.WebsiteHeroSectionPhoto", b =>
                {
                    b.HasBaseType("MyShop.Core.Models.Photos.Photo");

                    b.HasDiscriminator().HasValue("Website Hero Photo");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductDetailOption", b =>
                {
                    b.HasBaseType("MyShop.Core.Models.Products.BaseProductOption");

                    b.HasDiscriminator().HasValue("Detail");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductVariantOption", b =>
                {
                    b.HasBaseType("MyShop.Core.Models.Products.BaseProductOption");

                    b.HasDiscriminator().HasValue("Variant");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductDetailOptionValue", b =>
                {
                    b.HasBaseType("MyShop.Core.Models.Products.BaseProductOptionValue");

                    b.HasIndex("ProductOptionId");

                    b.HasIndex("Value", "ProductOptionId", "Position")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Detail");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductVariantOptionValue", b =>
                {
                    b.HasBaseType("MyShop.Core.Models.Products.BaseProductOptionValue");

                    b.HasIndex("ProductOptionId");

                    b.HasIndex("Value", "ProductOptionId", "Position")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Variant");
                });

            modelBuilder.Entity("MyShop.Core.Models.Users.Guest", b =>
                {
                    b.HasBaseType("MyShop.Core.Models.Users.User");

                    b.HasDiscriminator().HasValue("Guest");
                });

            modelBuilder.Entity("MyShop.Core.Models.Users.RegisteredUser", b =>
                {
                    b.HasBaseType("MyShop.Core.Models.Users.User");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecuredPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasFilter("[PhotoId] IS NOT NULL");
                });

            modelBuilder.Entity("MyShop.Core.Models.Users.Customer", b =>
                {
                    b.HasBaseType("MyShop.Core.Models.Users.RegisteredUser");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("MyShop.Core.Models.Users.Employee", b =>
                {
                    b.HasBaseType("MyShop.Core.Models.Users.RegisteredUser");

                    b.Property<string>("EmployeeRole")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("MyShop.Core.Models.MainPageSections.WebsiteHeroSectionItem", b =>
                {
                    b.HasOne("MyShop.Core.Models.MainPageSections.WebsiteHeroSection", "WebsiteHeroSection")
                        .WithMany("WebsiteHeroSectionItems")
                        .HasForeignKey("WebsiteHeroSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShop.Core.Models.Photos.WebsiteHeroSectionPhoto", "WebsiteHeroSectionPhoto")
                        .WithMany("WebsiteHeroSectionWebsiteHeroSectionPhotos")
                        .HasForeignKey("WebsiteHeroSectionPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebsiteHeroSection");

                    b.Navigation("WebsiteHeroSectionPhoto");
                });

            modelBuilder.Entity("MyShop.Core.Models.Notifications.NotificationRegisteredUser", b =>
                {
                    b.HasOne("MyShop.Core.Models.Notifications.Notification", "Notification")
                        .WithMany("NotificationRegisteredUsers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShop.Core.Models.Users.RegisteredUser", "RegisteredUser")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("MyShop.Core.Models.Orders.Order", b =>
                {
                    b.HasOne("MyShop.Core.Models.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyShop.Core.Models.Orders.OrderProduct", b =>
                {
                    b.HasOne("MyShop.Core.Models.Orders.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShop.Core.Models.Products.ProductVariant", "ProductVariant")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("MyShop.Core.Models.Orders.OrderStatusHistory", b =>
                {
                    b.HasOne("MyShop.Core.Models.Orders.Order", "Order")
                        .WithMany("OrderStatusHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.Category", b =>
                {
                    b.HasOne("MyShop.Core.Models.Products.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.OwnsOne("MyShop.Core.Models.Products.HierarchyDetail", "HierarchyDetail", b1 =>
                        {
                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("EncodedHierarchyName")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("HierarchyName")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Level")
                                .HasColumnType("int");

                            b1.Property<Guid>("RootCategoryId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("CategoryId");

                            b1.HasIndex("EncodedHierarchyName")
                                .IsUnique();

                            b1.HasIndex("HierarchyName")
                                .IsUnique();

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("HierarchyDetail")
                        .IsRequired();

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.Favorite", b =>
                {
                    b.HasOne("MyShop.Core.Models.Users.RegisteredUser", "RegisteredUser")
                        .WithMany("Favorites")
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.Product", b =>
                {
                    b.HasOne("MyShop.Core.Models.Products.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductProductDetailOptionValue", b =>
                {
                    b.HasOne("MyShop.Core.Models.Products.ProductDetailOptionValue", "ProductDetailOptionValue")
                        .WithMany()
                        .HasForeignKey("ProductDetailOptionValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShop.Core.Models.Products.Product", "Product")
                        .WithMany("ProductProductDetailOptionValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductDetailOptionValue");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductProductVariantOption", b =>
                {
                    b.HasOne("MyShop.Core.Models.Products.Product", "Product")
                        .WithMany("ProductProductVariantOptions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShop.Core.Models.Products.ProductVariantOption", "ProductVariantOption")
                        .WithMany("ProductProductVariantOptions")
                        .HasForeignKey("ProductVariantOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductVariantOption");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductReview", b =>
                {
                    b.HasOne("MyShop.Core.Models.Products.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShop.Core.Models.Users.RegisteredUser", "RegisteredUser")
                        .WithMany("ProductReviews")
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductVariant", b =>
                {
                    b.HasOne("MyShop.Core.Models.Products.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductVariantPhotoItem", b =>
                {
                    b.HasOne("MyShop.Core.Models.Products.ProductVariant", "ProductVariant")
                        .WithMany("PhotoItems")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShop.Core.Models.Photos.ProductVariantPhoto", "ProductVariantPhoto")
                        .WithMany("ProductVariantPhotoItems")
                        .HasForeignKey("ProductVariantPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("ProductVariantPhoto");
                });

            modelBuilder.Entity("MyShop.Core.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.HasOne("MyShop.Core.Models.Users.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("MyShop.Core.Models.ShoppingCarts.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyShop.Core.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.HasOne("MyShop.Core.Models.Products.ProductVariant", "ProductVariant")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShop.Core.Models.ShoppingCarts.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("MyShop.Core.Models.Users.UserAddress", b =>
                {
                    b.HasOne("MyShop.Core.Models.Users.RegisteredUser", "RegisteredUser")
                        .WithMany("UserAddresses")
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("MyShop.Core.Models.Users.UserToken", b =>
                {
                    b.HasOne("MyShop.Core.Models.Users.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductVariantProductVariantOptionValue", b =>
                {
                    b.HasOne("MyShop.Core.Models.Products.ProductVariantOptionValue", null)
                        .WithMany()
                        .HasForeignKey("ProductVariantOptionValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShop.Core.Models.Products.ProductVariant", null)
                        .WithMany()
                        .HasForeignKey("ProductVariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductDetailOptionValue", b =>
                {
                    b.HasOne("MyShop.Core.Models.Products.ProductDetailOption", "ProductDetailOption")
                        .WithMany("ProductOptionValues")
                        .HasForeignKey("ProductOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetailOption");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductVariantOptionValue", b =>
                {
                    b.HasOne("MyShop.Core.Models.Products.ProductVariantOption", "ProductVariantOption")
                        .WithMany("ProductOptionValues")
                        .HasForeignKey("ProductOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariantOption");
                });

            modelBuilder.Entity("MyShop.Core.Models.Users.RegisteredUser", b =>
                {
                    b.HasOne("MyShop.Core.Models.Photos.UserPhoto", "Photo")
                        .WithOne("RegisteredUser")
                        .HasForeignKey("MyShop.Core.Models.Users.RegisteredUser", "PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("MyShop.Core.Models.Notifications.Notification", b =>
                {
                    b.Navigation("NotificationRegisteredUsers");
                });

            modelBuilder.Entity("MyShop.Core.Models.Orders.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("OrderStatusHistories");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.Category", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.Product", b =>
                {
                    b.Navigation("ProductProductDetailOptionValues");

                    b.Navigation("ProductProductVariantOptions");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductVariant", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("PhotoItems");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("MyShop.Core.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("MyShop.Core.Models.Users.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCart")
                        .IsRequired();

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("MyShop.Core.Models.MainPageSections.WebsiteHeroSection", b =>
                {
                    b.Navigation("WebsiteHeroSectionItems");
                });

            modelBuilder.Entity("MyShop.Core.Models.Photos.ProductVariantPhoto", b =>
                {
                    b.Navigation("ProductVariantPhotoItems");
                });

            modelBuilder.Entity("MyShop.Core.Models.Photos.UserPhoto", b =>
                {
                    b.Navigation("RegisteredUser")
                        .IsRequired();
                });

            modelBuilder.Entity("MyShop.Core.Models.Photos.WebsiteHeroSectionPhoto", b =>
                {
                    b.Navigation("WebsiteHeroSectionWebsiteHeroSectionPhotos");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductDetailOption", b =>
                {
                    b.Navigation("ProductOptionValues");
                });

            modelBuilder.Entity("MyShop.Core.Models.Products.ProductVariantOption", b =>
                {
                    b.Navigation("ProductOptionValues");

                    b.Navigation("ProductProductVariantOptions");
                });

            modelBuilder.Entity("MyShop.Core.Models.Users.RegisteredUser", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("NotificationUsers");

                    b.Navigation("ProductReviews");

                    b.Navigation("UserAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
